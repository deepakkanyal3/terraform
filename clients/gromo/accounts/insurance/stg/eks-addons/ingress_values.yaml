rbac:
  create: true

controller:
  metrics:
    enabled: true
  podAnnotations:
    prometheus.io/port: "10254"
    prometheus.io/scrape: "true"
  resources:
    limits:
      cpu: 400m
      memory: 600Mi
    requests:
      cpu: 100m
      memory: 300Mi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    #targetMemoryUtilizationPercentage: 70
  config:
    compute-full-forwarded-for: "true"
    use-forwarded-headers: "true"
    proxy-body-size: "0"
    proxy-real-ip-cidr: "${vpc_cidr}"
  ingressClass: "${ingress_class}"
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - ingress-nginx
          topologyKey: "kubernetes.io/hostname"
  admissionwebhooks:
    enabled: true
  service:
    internal:
      enabled: true
    targetPorts:
      http: http
      https: http
    annotations:
      #service.beta.kubernetes.io/aws-load-balancer-type: nlb
      service.beta.kubernetes.io/aws-load-balancer-name: "${lb_name}" # can be used only at time of creation
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${acm_arn}"
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
      service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
      service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
      #service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      #service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
      service.beta.kubernetes.io/aws-load-balancer-internal: "${internal}"
      #service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
      nginx.ingress.kubernetes.io/configuration-snippet: |
        if ($http_x_forwarded_proto != 'https') {
          return 301 https://$host$request_uri;
        }
